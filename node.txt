学习笔记

###创建虚拟环境
1.使用 pipenv 创建虚拟环境 和 绑定项目 每一个项目都要一个虚拟环境 不是全局的
2.全局安装一个 pipenv
3.给每一个项目创建虚拟环境 pipenv install
4.进去虚拟环境 pipenv shell
5.安装flask包 pipenv install flask
6.运行flask 没有报错 或者 没有找不到命令 说明安装成功
7.退出虚拟环境 exit
8.卸载包 pipenv uninstall 包名
9.查看包的 依赖关系 pipenv graph
10.查询虚拟环境的路径 pipenv --venv

###开始项目
1.创建入口文件 导入Flask 如果提示报错要修改默认解释器
  from flask import Flask
2.实例化Flask
  app = Flask(__name__)
3.运行flask
  app.run()


###数据API
基地址：http://t.yushu.im
关键字搜索：http://t.yushu.im/v2/book/search?q={}&start={}&count={}
isbn搜索：http://t.yushu.im/v2/book/isbn/{}
豆瓣API：https://api.douban.com/v2/book

###第一个视图函数

条件判断的先后对代码的效率有影响
把假的先放前面，把执行慢速率慢的放在后面（比如需要查询数据库的）

###简单的重构
为什么重构？
减少代码量，提高阅读性
视图函数代码要简介 便于维护 便于阅读
怎么看源代码？
不要着急看源代码，第一遍先理清线性结构，而不是要理清细节

###使用requests请求数据API
可以用 urllib 虽然不需要安装但是比较麻烦
使用 requests 需要安装requests的包
导入 requests包 import requests
不能直接return json格式 要格式化之后再return

python中的三元表达式

return 1 if True else 2
if前面返回真值的判断 else 返回假值的判断

###从API获取数据

在类中的方法前面加上此修饰关键字，此方法就成为了 类方法
@classmethod


###使用 jsonify
使用jsonify格式化json格式的数据

###将视图函数拆分到单独的文件中
不推荐吧 所有的视图函数放到到一个文件中
把不同的业务模型放到不同的视图函数中
在根目录新建app文件夹来份文件
入口文件只做一些初始化和启动项目的工作



###蓝图和视图函数
flask 引用了蓝图机制
蓝图不能独立存在，只能插入APP中
蓝图又包括视图函数
把视图函数注册到不同蓝图，来文件


###用蓝图注册视图函数
Blueprint()用来注册一个蓝图
Blueprint 从 flask中导入
Blueprint需要两个参数 第一个 蓝图的名称（一般是文件夹名） 第二个是路径（通常用__name__）  如 Blueprint('web', __name__)

想要成功调用视图函数 还要把蓝图注册到app中

###拆分配置文件



###单蓝图多模块分拆视图函数

###request接收参数
request.to_dict()转成可变的字典

###WTForms参数验证
WTForms是第三方的参数验证的插件 使用时要安装一下
用法：
概念：验证层
验证完之后 参数从form中取
strip()取出两遍的空格 和php trim() 功能一样

#####基本目录结构完成 开始数据库的学习

###定义一个模型类
用 Code First 来创建数据库 需要安装flask-sqlalchemy

Column 创建一列

###将模型映射到数据库中
想要使用SqlAlchemy 就要导入 flask_sqlalchemy
导入之后还需要把SqlAlchemy 插入主要核心类中 db.init_app(app)
在配置文件中添加配置参数 名字不能改

SQLALCHEMY_DATABASE_URI = 'mysql+cymysql://root:@localhost:3306/fisher'
SQLALCHEMY_DATABASE_URI = '数据库类型+数据库驱动://用户名:密码@HOST:端口/数据库名'
SQLALCHEMY_DATABASE_URI = 'mysql+cymysql://root:@localhost:3306/fisher'

cymsyql 不是flask 包中的 需要安装一下 cymysql 是python连接mysql的驱动

####flask 核心机制
###flask 中经典的错误
#离线应用、单元测试的时候报错误 working outside application context 是因为app_context没有入栈
需要手动入栈和出栈，
ctx = app.app_context()
ctx.push()
a = app.current_app()
d = current_app.config['DEBUG']
ctx.pop()

//使用with语法简写上述代码
with app.app_context():
    a = app.current_app()
    d = current_app.config['DEBUG']

###python with语句
1.with语句用法：实现了上下文协议的对象使用with
2.上下文管理器
3.__enter__、__exit__ 实现了这两个方法
4.上下文表达式必须返回一个上下文管理器

事例：文件读写和数据库操作
#文件读写
try:
    f = open(r'文件路径')
    print(f.read())
finally:
    f.close()

with语法
with: open(r'文件路径') as f :
    print(f.read())


####Python线程
###什么是线程
什么是线程，那就要先知道什么是进程了
进程是竞争计算机资源的基本单位

1.单核CPU 永远只能执行一个应用程序？
2.但是我们看到的并不是，因为CPU运算速度特别快，它是在不同的应用程序进程之间切换
3.进程调度 -- 有自己的算法来挂起 切换到另外一个进程，
4.进程/线程 进程来回的切换开销是非常大的

什么是线程?
线程是进程的一部分，可以有一个线程，可以有多个线程
因为进程的切换太过于笨重，开销太大 所以要引入更小的单元
线程切换要小

他们的分工
进程 分配资源 内存资源
线程 利用CPU执行代码
